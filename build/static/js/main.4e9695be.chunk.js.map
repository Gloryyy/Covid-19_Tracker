{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","MapDisplay","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","id","key","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e9695be.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}{\" \"}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}{\" \"}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total{\" \"}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    // rgb: \"rgb(204,16,52)\",\n    // half_op: \"rgba(204,16,52,0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    // rgb: \"rgb(125,215,29)\",\n    // half_op: \"rgba(125,215,29,0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    // rgb: \"rgb(251,68,67)\",\n    // half_op: \"rgba(251,68,67,0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  return sortedData.sort((a, b) => a.cases > b.cases);\n\n  /* if (a.cases > b.cases) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    return sortedData; */\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : 0;\n\n// Draw Circle\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country} </div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}{\" \"}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}{\" \"}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}{\" \"}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"../Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"../util\";\n\nfunction MapDisplay({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {/* Loop through the countries and draw circle */}\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\nexport default MapDisplay;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport \"../table.css\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country} </td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")} </strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph(casesType = \"cases\", ...props) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((res) => {\n          return res.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, \"cases\");\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,16,52,0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport MapDisplay from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport LineGraph from \"./components/LineGraph\";\nimport \"./App.css\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState([\"worldwide\"]);\n  const [countryInfo, setCountryInfo] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    // The Code inside here will run once when the Component loads and not again\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2, // UK, USA, FR\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, id) => (\n                <MenuItem key={id} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <MapDisplay\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType} </h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}